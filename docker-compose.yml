services:
  postgres:
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      - POSTGRES_DB=mlops
    volumes:
      - ./local-data/postgres/data:/var/lib/postgresql/data
    networks:
      - postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U fede -d postgres" ]
      interval: 10s
      timeout: 8s
      retries: 5
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - "8080:80"
    env_file:
      - .env
    volumes:
      - ./local-data/pgadmin/var_lib:/var/lib/pgadmin
      - ./local-data/pgadmin/server:/pgadmin4/servers.json
    depends_on:
      - postgres
    networks:
      - postgres
      - dagster

  dbt:
    build: ./dbt
    image: dbt-postgres
    volumes:
      - ./dbt/src:/code
      - /home/fede/.dbt/profiles.yml:/root/.dbt/profiles.yml
    depends_on:
      - postgres
    networks:
      - postgres
    restart: always
    # workaround on missing sleep infinity
    command: [ "sleep", "infinity" ]

  dagster-db:
    image: postgres:latest
    env_file:
      - .env
    environment:
      - POSTGRES_DB=dagster
    networks:
      - dagster
    volumes:
      - ./local-data/dagster_db/data:/var/lib/postgresql/data
    expose:
      - 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U fede -d postgres" ]
      interval: 10s
      timeout: 8s
      retries: 5

  user-code-airbyte:
    build:
      context: ./dagster/user-code-airbyte
    image: user-code-airbyte
    restart: always
    networks:
      - dagster
    env_file:
      - .env
    environment:
      DAGSTER_POSTGRES_DB: "dagster"
      DAGSTER_CURRENT_IMAGE: "user-code-airbyte"
    expose:
      - 4000
    volumes:
      - ./local-data/gaster_home:/opt/dagster/dagster_home
      - ./dagster/user-code-airbyte/src:/opt/dagster/app

  user-code-mlflow:
    build:
      context: ./dagster/user-code-mlflow
    image: user-code-mlflow
    restart: always
    networks:
      - dagster
      - postgres
    env_file:
      - .env
    environment:
      DAGSTER_POSTGRES_DB: "dagster"
      DAGSTER_CURRENT_IMAGE: "user-code-mlflow"
      MLFLOW_HOSTNAME: mlflow-server
      MLFLOW_PORT: 8080
    expose:
      - 4000
    volumes:
      - ./local-data/gaster_home:/opt/dagster/dagster_home
      - ./dagster/user-code-mlflow/src:/opt/dagster/app

  user-code-dbt:
    build:
      context: ./dagster/user-code-dbt
    image: user-code-dbt
    restart: always
    networks:
      - dagster
      - postgres
    env_file:
      - .env
    environment:
      DAGSTER_POSTGRES_DB: "dagster"
      DAGSTER_CURRENT_IMAGE: "user-code-dbt"
    expose:
      - 4000
    volumes:
      - ./local-data/gaster_home:/opt/dagster/dagster_home
      - ./dagster/user-code-dbt/src:/opt/dagster/app
      - /home/fede/.dbt/profiles.yml:/root/.dbt/profiles.yml

  dagster-webserver:
    build:
      context: ./dagster/server
    image: dagster-webserver
    restart: always
    depends_on:
      - dagster-db
    networks:
      - dagster
    entrypoint: [ "dagster-webserver", "-h", "0.0.0.0", "-p", "3000", "-w", "workspace.yaml" ]
    volumes:
      - ./dagster/server/workspace.yaml:/opt/dagster/dagster_home/workspace.yaml
      - ./dagster/server/dagster.yaml:/opt/dagster/dagster_home/dagster.yaml
      - ./local-data/gaster_home:/opt/dagster/dagster_home
    ports:
      - "8030:3000"
    expose:
      - "3000"

  dagster-daemon:
    build:
      context: ./dagster/server
    image: dagster-daemon
    restart: on-failure
    entrypoint:
      - dagster-daemon
      - run
    depends_on:
      dagster-db:
        condition: service_healthy
      dagster-webserver:
        condition: service_started
    networks:
      - dagster
    volumes:
      - ./dagster/server/workspace.yaml:/opt/dagster/dagster_home/workspace.yaml
      - ./dagster/server/dagster.yaml:/opt/dagster/dagster_home/dagster.yaml
      # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - ./local-data/gaster_home:/opt/dagster/dagster_home

  mlflow-server:
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    image: mlflow-server
    ports:
      - "8040:8080"
    expose:
      - "8080"
    networks:
      - dagster

networks:
  postgres:
  dagster:


